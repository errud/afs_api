/*
Deployment script for AfrikSokoDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AfrikSokoDB"
:setvar DefaultFilePrefix "AfrikSokoDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Addresses]...';


GO
CREATE TABLE [dbo].[Addresses] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [UserId]    INT           NOT NULL,
    [FirstName] VARCHAR (50)  NOT NULL,
    [LastName]  VARCHAR (50)  NOT NULL,
    [Street]    VARCHAR (200) NULL,
    [City]      VARCHAR (30)  NOT NULL,
    [State]     VARCHAR (30)  NULL,
    [Zip]       VARCHAR (10)  NULL,
    [Country]   VARCHAR (20)  NOT NULL,
    CONSTRAINT [PK_Address] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[AppRole]...';


GO
CREATE TABLE [dbo].[AppRole] (
    [Id]       INT          IDENTITY (1, 1) NOT NULL,
    [RoleName] VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[AppSalt]...';


GO
CREATE TABLE [dbo].[AppSalt] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [SaltValue] VARCHAR (100) NOT NULL,
    [UserId]    INT           NOT NULL,
    CONSTRAINT [PK_Salt] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[AppUser]...';


GO
CREATE TABLE [dbo].[AppUser] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [Email]    VARCHAR (50)   NOT NULL,
    [Passwd]   VARBINARY (64) NOT NULL,
    [RoleId]   INT            NOT NULL,
    [NickName] VARCHAR (50)   NOT NULL,
    [IsActive] BIT            NOT NULL,
    [Created]  DATETIME2 (7)  NOT NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_User_Email] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating Table [dbo].[Buyer]...';


GO
CREATE TABLE [dbo].[Buyer] (
    [Id]      INT          IDENTITY (1, 1) NOT NULL,
    [UserId]  INT          NOT NULL,
    [Phone]   VARCHAR (80) NOT NULL,
    [City]    VARCHAR (50) NOT NULL,
    [Country] VARCHAR (50) NOT NULL,
    [Company] VARCHAR (80) NOT NULL,
    [Url]     VARCHAR (80) NOT NULL,
    [Status]  BIT          NOT NULL,
    CONSTRAINT [PK_Buyer] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_Buyer_User] UNIQUE NONCLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating Table [dbo].[CartItems]...';


GO
CREATE TABLE [dbo].[CartItems] (
    [UserId]        INT NOT NULL,
    [ProductId]     INT NOT NULL,
    [ProductTypeId] INT NOT NULL,
    [Quantity]      INT NOT NULL
);


GO
PRINT N'Creating Table [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [Id]      INT           IDENTITY (1, 1) NOT NULL,
    [Name]    VARCHAR (100) NOT NULL,
    [Url]     VARCHAR (30)  NOT NULL,
    [Deleted] BIT           NOT NULL,
    [Visible] BIT           NOT NULL,
    CONSTRAINT [PK_Category] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Comments]...';


GO
CREATE TABLE [dbo].[Comments] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [UserId]    INT           NULL,
    [ProductId] INT           NULL,
    [Content]   VARCHAR (MAX) NOT NULL,
    [Created]   DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_Comments] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[OrderItems]...';


GO
CREATE TABLE [dbo].[OrderItems] (
    [OrderId]       INT             NOT NULL,
    [ProductId]     INT             NOT NULL,
    [ProductTypeId] INT             NOT NULL,
    [Quantity]      INT             NOT NULL,
    [TotalPrice]    DECIMAL (18, 2) NOT NULL
);


GO
PRINT N'Creating Table [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [Id]         INT             IDENTITY (1, 1) NOT NULL,
    [UserId]     INT             NOT NULL,
    [OrderDate]  DATETIME2 (7)   NOT NULL,
    [TotalPrice] DECIMAL (18, 2) NOT NULL,
    CONSTRAINT [PK_Orders] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [Id]            INT           IDENTITY (1, 1) NOT NULL,
    [Title]         VARCHAR (MAX) NULL,
    [ImageUrl]      VARCHAR (MAX) NULL,
    [Description]   VARCHAR (MAX) NULL,
    [Origin]        VARCHAR (50)  NULL,
    [ProductTypeId] INT           NOT NULL,
    [CategoryId]    INT           NOT NULL,
    [Featured]      BIT           NOT NULL,
    [Deleted]       BIT           NOT NULL,
    [Visible]       BIT           NOT NULL,
    CONSTRAINT [PK_Product] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ProductType]...';


GO
CREATE TABLE [dbo].[ProductType] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_ProductType] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ProductVariant]...';


GO
CREATE TABLE [dbo].[ProductVariant] (
    [ProductId]     INT             NOT NULL,
    [ProductTypeId] INT             NOT NULL,
    [Price]         DECIMAL (18, 2) NOT NULL,
    [OriginalPrice] DECIMAL (18, 2) NOT NULL,
    [Visible]       BIT             NOT NULL,
    [Deleted]       BIT             NOT NULL
);


GO
PRINT N'Creating Table [dbo].[Sector]...';


GO
CREATE TABLE [dbo].[Sector] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [SectorName] VARCHAR (250) NOT NULL,
    CONSTRAINT [PK_Sector] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UK_Sector_SectorName] UNIQUE NONCLUSTERED ([SectorName] ASC)
);


GO
PRINT N'Creating Table [dbo].[ServiceAsked]...';


GO
CREATE TABLE [dbo].[ServiceAsked] (
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [ServiceName] VARCHAR (250)   NOT NULL,
    [Price]       DECIMAL (18, 2) NOT NULL,
    [Period]      VARCHAR (50)    NOT NULL,
    [Note]        VARCHAR (80)    NOT NULL,
    CONSTRAINT [PK_Service] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_Service_ServiceName] UNIQUE NONCLUSTERED ([ServiceName] ASC)
);


GO
PRINT N'Creating Table [dbo].[Supplier]...';


GO
CREATE TABLE [dbo].[Supplier] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [UserId]     INT           NOT NULL,
    [Company]    VARCHAR (80)  NULL,
    [SectorId]   INT           NOT NULL,
    [ServiceId]  INT           NOT NULL,
    [Membership] BIT           NOT NULL,
    [Contact]    VARCHAR (100) NOT NULL,
    [Phone]      VARCHAR (100) NOT NULL,
    [Email]      VARCHAR (100) NOT NULL,
    [Url]        VARCHAR (50)  NULL,
    [Address]    VARCHAR (250) NULL,
    [City]       VARCHAR (80)  NOT NULL,
    [Country]    VARCHAR (50)  NOT NULL,
    [AdditInfo]  VARCHAR (350) NULL,
    [Status]     BIT           NOT NULL,
    [Created]    DATETIME2 (7) NOT NULL,
    CONSTRAINT [PK_Supplier] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UQ_Supplier_Company] UNIQUE NONCLUSTERED ([Company] ASC),
    CONSTRAINT [UQ_Supplier_User] UNIQUE NONCLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[AppUser]...';


GO
ALTER TABLE [dbo].[AppUser]
    ADD DEFAULT (1) FOR [RoleId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[AppUser]...';


GO
ALTER TABLE [dbo].[AppUser]
    ADD DEFAULT (1) FOR [IsActive];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Buyer]...';


GO
ALTER TABLE [dbo].[Buyer]
    ADD DEFAULT (1) FOR [Status];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Category]...';


GO
ALTER TABLE [dbo].[Category]
    ADD DEFAULT (0) FOR [Deleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Category]...';


GO
ALTER TABLE [dbo].[Category]
    ADD DEFAULT (1) FOR [Visible];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD DEFAULT (0) FOR [Featured];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD DEFAULT (0) FOR [Deleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD DEFAULT (1) FOR [Visible];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ProductVariant]...';


GO
ALTER TABLE [dbo].[ProductVariant]
    ADD DEFAULT (1) FOR [Visible];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ProductVariant]...';


GO
ALTER TABLE [dbo].[ProductVariant]
    ADD DEFAULT (0) FOR [Deleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Supplier]...';


GO
ALTER TABLE [dbo].[Supplier]
    ADD DEFAULT (0) FOR [Membership];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Supplier]...';


GO
ALTER TABLE [dbo].[Supplier]
    ADD DEFAULT (1) FOR [Status];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Address_User]...';


GO
ALTER TABLE [dbo].[Addresses]
    ADD CONSTRAINT [FK_Address_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AppUser] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Salt_User]...';


GO
ALTER TABLE [dbo].[AppSalt]
    ADD CONSTRAINT [FK_Salt_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AppUser] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Role_User]...';


GO
ALTER TABLE [dbo].[AppUser]
    ADD CONSTRAINT [FK_Role_User] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AppRole] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Buyer_User]...';


GO
ALTER TABLE [dbo].[Buyer]
    ADD CONSTRAINT [FK_Buyer_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AppUser] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CartItems_AppUser]...';


GO
ALTER TABLE [dbo].[CartItems]
    ADD CONSTRAINT [FK_CartItems_AppUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AppUser] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CartItems_Product]...';


GO
ALTER TABLE [dbo].[CartItems]
    ADD CONSTRAINT [FK_CartItems_Product] FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CartItems_ProdType]...';


GO
ALTER TABLE [dbo].[CartItems]
    ADD CONSTRAINT [FK_CartItems_ProdType] FOREIGN KEY ([ProductTypeId]) REFERENCES [dbo].[ProductType] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Comments_User]...';


GO
ALTER TABLE [dbo].[Comments]
    ADD CONSTRAINT [FK_Comments_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AppUser] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OrderItems_Orders]...';


GO
ALTER TABLE [dbo].[OrderItems]
    ADD CONSTRAINT [FK_OrderItems_Orders] FOREIGN KEY ([OrderId]) REFERENCES [dbo].[Orders] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OrderItems_Product]...';


GO
ALTER TABLE [dbo].[OrderItems]
    ADD CONSTRAINT [FK_OrderItems_Product] FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OrderItems_ProdType]...';


GO
ALTER TABLE [dbo].[OrderItems]
    ADD CONSTRAINT [FK_OrderItems_ProdType] FOREIGN KEY ([ProductTypeId]) REFERENCES [dbo].[ProductType] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Orders_AppUser]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [FK_Orders_AppUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AppUser] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Product_Category]...';


GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [FK_Product_Category] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Product_ProdType]...';


GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [FK_Product_ProdType] FOREIGN KEY ([ProductTypeId]) REFERENCES [dbo].[ProductType] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ProdVariant_Product]...';


GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [FK_ProdVariant_Product] FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ProdVariant_ProdType]...';


GO
ALTER TABLE [dbo].[ProductVariant]
    ADD CONSTRAINT [FK_ProdVariant_ProdType] FOREIGN KEY ([ProductTypeId]) REFERENCES [dbo].[ProductType] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Supplier_User]...';


GO
ALTER TABLE [dbo].[Supplier]
    ADD CONSTRAINT [FK_Supplier_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AppUser] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Supplier_Sector]...';


GO
ALTER TABLE [dbo].[Supplier]
    ADD CONSTRAINT [FK_Supplier_Sector] FOREIGN KEY ([SectorId]) REFERENCES [dbo].[Sector] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Supplier_Service]...';


GO
ALTER TABLE [dbo].[Supplier]
    ADD CONSTRAINT [FK_Supplier_Service] FOREIGN KEY ([ServiceId]) REFERENCES [dbo].[ServiceAsked] ([Id]);


GO
PRINT N'Creating Trigger [dbo].[UserSoftDelete]...';


GO
CREATE TRIGGER [UserSoftDelete]
ON [dbo].[AppUser]
INSTEAD OF DELETE
AS
BEGIN 
	UPDATE [AppUser] SET IsActive = 0 WHERE Id = (SELECT Id FROM deleted) 
END
GO
PRINT N'Creating Trigger [dbo].[BuyerSoftDelete]...';


GO
CREATE TRIGGER [BuyerSoftDelete]
ON [dbo].[Buyer]
INSTEAD OF DELETE
AS
BEGIN
	UPDATE [Buyer] SET [Status] = 0 WHERE Id = (SELECT Id FROM deleted)
END
GO
PRINT N'Creating Trigger [dbo].[CategorySoftDelete]...';


GO
CREATE TRIGGER [CategorySoftDelete]
ON [dbo].[Category]
INSTEAD OF DELETE
AS
BEGIN
	UPDATE [Category] SET Deleted = 1 WHERE Id = (SELECT Id FROM deleted)
END
GO
PRINT N'Creating Trigger [dbo].[ProductSoftDelete]...';


GO
CREATE TRIGGER [ProductSoftDelete]
ON [dbo].[Product]
INSTEAD OF DELETE
AS
BEGIN
	UPDATE [Product] SET Deleted = 1 WHERE Id = (SELECT Id FROM deleted)
END
GO
PRINT N'Creating Trigger [dbo].[SupplierSoftDelete]...';


GO
CREATE TRIGGER [SupplierSoftDelete]
ON [dbo].[Supplier]
INSTEAD OF DELETE
AS
BEGIN
	UPDATE [Supplier] SET [Status] = 0 WHERE Id = (SELECT Id FROM deleted)
END
GO
PRINT N'Creating View [dbo].[V_AppUser]...';


GO
CREATE VIEW [dbo].[V_AppUser]
	AS SELECT u.Id, u.Email, u.NickName, r.RoleName AS Role FROM AppUser u 
	JOIN AppRole r ON r.Id = u.RoleId
GO
PRINT N'Creating Function [dbo].[GetSecretKey]...';


GO
CREATE FUNCTION [dbo].[GetSecretKey]
()
RETURNS VARCHAR(100)
AS
BEGIN
	RETURN 'L Rrg3nt enùo9lit 3e qu%i est Friv0Le si non RéMVnéPé P%ùP'
END
GO
PRINT N'Creating Procedure [dbo].[AddAddress]...';


GO
CREATE PROCEDURE [dbo].[AddAddress]
	@userid INT,
	@fname VARCHAR(50),
	@lname VARCHAR(50),
	@street VARCHAR(200),
	@city VARCHAR(30),
	@state VARCHAR(30),
	@zipc VARCHAR(10),
	@ctry VARCHAR(20)
AS
	BEGIN
		INSERT INTO Addresses (UserId, FirstName, LastName, Street, City, [State], Zip, Country)
		VALUES (@userid, @fname, @lname, @street, @city, @state, @zipc, @ctry)
	END
GO
PRINT N'Creating Procedure [dbo].[AddBuyer]...';


GO
CREATE PROCEDURE [dbo].[AddBuyer]
	@userid INT,
	@tel VARCHAR(80),
	@city VARCHAR(50),
	@ctry VARCHAR(50),
	@company VARCHAR(80),
	@url VARCHAR(80)
AS
	BEGIN
		INSERT INTO Buyer (UserId, Phone, City, Country, Company, [Url], [Status])
		VALUES (@userid, @tel, @city, @ctry, @company, @url, 1)
	END
GO
PRINT N'Creating Procedure [dbo].[AddCategory]...';


GO
CREATE PROCEDURE [dbo].[AddCategory]
	@name VARCHAR(100),
	@url VARCHAR(30)

AS
	BEGIN
		INSERT INTO Category ([Name], [Url], [Deleted], [Visible])
		VALUES (@name, @url, 0, 1)
	END
GO
PRINT N'Creating Procedure [dbo].[AddComment]...';


GO
CREATE PROCEDURE [dbo].[AddComment]
	@userid INT,
	@prodid INT,
	@note VARCHAR(MAX)


AS
	BEGIN
		INSERT INTO Comments (UserId, ProductId, Content, Created)
		VALUES (@userid, @prodid, @note, GetDate())
	END
GO
PRINT N'Creating Procedure [dbo].[AddOrderItem]...';


GO
CREATE PROCEDURE [dbo].[AddOrderItem]
	@orderid INT ,
	@prodid INT,
	@prodtypeid INT,
	@qty INT,
	@totprice DECIMAL(18,2)

AS
	BEGIN
		INSERT INTO OrderItems (OrderId, ProductId, ProductTypeId, Quantity, TotalPrice)
		VALUES (@orderid, @prodid, @prodtypeid, @qty, @totprice)
	END
GO
PRINT N'Creating Procedure [dbo].[AddProduct]...';


GO
CREATE PROCEDURE [dbo].[AddProduct]
	@title VARCHAR(MAX),
	@imgurl VARCHAR(MAX),
	@descr VARCHAR(MAX),
	@origin VARCHAR(50),
	@prodtypeid INT,
	@catid INT

AS
	BEGIN
		INSERT INTO Product (Title, ImageUrl, [Description], Origin, ProductTypeId, CategoryId)
		VALUES (@title, @imgurl, @descr, @origin, @prodtypeid, @catid)
	END
GO
PRINT N'Creating Procedure [dbo].[AddProductType]...';


GO
CREATE PROCEDURE [dbo].[AddProductType]
	@name VARCHAR(100)

AS
	BEGIN
		INSERT INTO ProductType ([Name])
		VALUES (@name)
	END
GO
PRINT N'Creating Procedure [dbo].[AddProductVariant]...';


GO
CREATE PROCEDURE [dbo].[AddProductVariant]
	@prodid INT,
	@prodtypeid INT,
	@price DECIMAL(18,2),
	@origprice DECIMAL(18,2)


AS
	BEGIN
		INSERT INTO ProductVariant (ProductId, ProductTypeId, Price, OriginalPrice)
		VALUES (@prodid, @prodtypeid, @price, @origprice)
	END
GO
PRINT N'Creating Procedure [dbo].[AddSector]...';


GO
CREATE PROCEDURE [dbo].[AddSector]
	@secname VARCHAR(250)
AS
BEGIN
	INSERT INTO Sector (SectorName) VALUES (@secname)
END
GO
PRINT N'Creating Procedure [dbo].[AddService]...';


GO
CREATE PROCEDURE [dbo].[AddService]
	@servname VARCHAR(250),
	@price DECIMAL(18,2),
	@period VARCHAR(50),
	@note VARCHAR(80)
AS
BEGIN
	INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES (@servname, @price, @period, @note)
END
GO
PRINT N'Creating Procedure [dbo].[AddSupplier]...';


GO
CREATE PROCEDURE [dbo].[AddSupplier]
    @userid INT,
	@company VARCHAR(80),
	@secId INT,
	@serId INT,
	@contact VARCHAR(100),
	@phone VARCHAR(100),
	@email VARCHAR(100),
	@url VARCHAR(50),
	@address VARCHAR(250),
	@city VARCHAR(80),
	@ctry VARCHAR (50),
	@ainfo VARCHAR(350)

AS
	BEGIN
		INSERT INTO Supplier (UserId, Company, SectorId, ServiceId, Membership, Contact, Phone, Email, [Url], [Address], City, Country, AdditInfo, [Status], Created) 
		VALUES (@userid, @company, @secId, @serId, 0, @contact, @phone, @email, @url, @address, @city, @ctry, @ainfo, 1, GetDate())
	END
GO
PRINT N'Creating Procedure [dbo].[AppUserLogin]...';


GO
CREATE PROCEDURE [dbo].[AppUserLogin]
	@email VARCHAR(50),
	@passwd VARCHAR(50)
AS 
BEGIN
	DECLARE @salt VARCHAR(100)
	DECLARE @id INT

	SELECT @id = Id FROM AppUser WHERE Email = @email
	
	SELECT @salt = SaltValue FROM AppSalt WHERE UserId = @id

	DECLARE @secret VARCHAR(100)
	SET @secret = dbo.GetSecretKey()

	DECLARE @hash VARBINARY(64)
	SET @hash = HASHBYTES('SHA2_512', CONCAT(@Salt, @passwd, @Salt, @secret));


	DECLARE @validId INT
	
	SELECT @validId = Id FROM AppUser WHERE Email = @email AND Passwd = @hash

	IF(@validId = null) 
	BEGIN
		RAISERROR (15600,-1,-1, 'sp_login');
	END
	ELSE
	BEGIN
		SELECT * FROM V_AppUser WHERE Id = @validId 
	END
END
GO
PRINT N'Creating Procedure [dbo].[AppUserRegister]...';


GO
CREATE PROCEDURE [dbo].[AppUserRegister]
	@email VARCHAR(50),
	@passwd VARCHAR(50),
	@nickname VARCHAR(50)

AS 
BEGIN
	SET NOCOUNT ON
	DECLARE @salt VARCHAR(100)
	SET @salt = CONCAT(NEWID(), NEWID(), NEWID())

	DECLARE @secret VARCHAR(100)
	SET @secret = dbo.GetSecretKey()

	DECLARE @hashpwd VARBINARY(64)
	SET @hashpwd = HASHBYTES('SHA2_512', CONCAT(@Salt, @passwd, @Salt, @secret));

	DECLARE @currentId INT

	INSERT INTO AppUser (Email, Passwd, RoleId, NickName, IsActive, Created) VALUES (@email, @hashpwd, 1, @nickname, 1, GetDate())

	SELECT @currentId = Id FROM AppUser WHERE Email = @email

	INSERT INTO AppSalt (SaltValue, UserId) VALUES (@salt, @currentId)

	SELECT Id FROM AppUser WHERE Email = @email
END
GO
PRINT N'Creating Procedure [dbo].[DeleteBuyer]...';


GO
CREATE PROCEDURE [dbo].[DeleteBuyer]
	@id INT
AS
BEGIN
	DELETE FROM Buyer WHERE Id = @id
END
GO
PRINT N'Creating Procedure [dbo].[DeleteCategory]...';


GO
CREATE PROCEDURE [dbo].[DeleteCategory]
	@id INT
AS
BEGIN
	DELETE FROM Category WHERE Id = @id
END
GO
PRINT N'Creating Procedure [dbo].[DeleteComment]...';


GO
CREATE PROCEDURE [dbo].[DeleteComment]
	@id INT
AS
BEGIN
	DELETE FROM Comments WHERE Id = @id
END
GO
PRINT N'Creating Procedure [dbo].[DeleteProduct]...';


GO
CREATE PROCEDURE [dbo].[DeleteProduct]
	@id INT
AS
BEGIN
	DELETE FROM Product WHERE Id = @id
END
GO
PRINT N'Creating Procedure [dbo].[DeleteProductVariant]...';


GO
CREATE PROCEDURE [dbo].[DeleteProductVariant]
	@prodid INT,
	@prodtypeid INT
AS
BEGIN
	DELETE FROM ProductVariant WHERE ProductId = @prodid and ProductTypeId = @prodtypeid
END
GO
PRINT N'Creating Procedure [dbo].[DeleteSupplier]...';


GO
CREATE PROCEDURE [dbo].[DeleteSupplier]
	@id INT
AS
BEGIN
	DELETE FROM Supplier WHERE Id = @id
END
GO
PRINT N'Creating Procedure [dbo].[UpdateBuyer]...';


GO
CREATE PROCEDURE [dbo].[UpdateBuyer]
	@userid INT,
	@tel VARCHAR(80),
	@city VARCHAR(50),
	@ctry VARCHAR(50),
	@company VARCHAR(80),
	@url VARCHAR(80),
	@id INT
AS
BEGIN
	UPDATE Buyer SET Phone = @tel, City = @city, Country = @ctry, Company = @company, [Url] = @url, [Status] = 1
	WHERE Id = @id and UserId = @userid
END
GO
PRINT N'Creating Procedure [dbo].[UpdateCategory]...';


GO
CREATE PROCEDURE [dbo].[UpdateCategory]
    @name VARCHAR(100),
	@url VARCHAR(30),
	@id INT

AS
	BEGIN
		UPDATE Category SET [Name] = @name, [Url] = @url
		WHERE Id = @id
	END
GO
PRINT N'Creating Procedure [dbo].[UpdateComment]...';


GO
CREATE PROCEDURE [dbo].[UpdateComment]
	@userid INT,
	@prodid INT,
	@note VARCHAR(MAX),
	@id INT
AS
	
	BEGIN
		UPDATE Comments SET [UserId] = @userid, ProductId = @prodid, Content = @note, Created = Getdate()
		WHERE Id = @id
	END
GO
PRINT N'Creating Procedure [dbo].[UpdateProduct]...';


GO
CREATE PROCEDURE [dbo].[UpdateProduct]
	@title VARCHAR(MAX),
	@imgurl VARCHAR(MAX),
	@descr VARCHAR(MAX),
	@origin VARCHAR(50),
	@prodtypeid INT,
	@catid INT,
	@id INT
AS
BEGIN
	UPDATE Product SET Title = @title, ImageUrl = @imgurl, [Description] = @descr, Origin = @origin, ProductTypeId = @prodtypeid, CategoryId = @catid
	WHERE Id = @id
END
GO
PRINT N'Creating Procedure [dbo].[UpdateProductVariant]...';


GO
CREATE PROCEDURE [dbo].[UpdateProductVariant]
	@prodid INT,
	@prodtypeid INT,
	@price DECIMAL(18,2),
	@origiprice DECIMAL(18,2),
	@visible BIT

AS
BEGIN

	UPDATE ProductVariant SET ProductId = @prodid, ProductTypeId = @prodtypeid, Price = @price, OriginalPrice = @origiprice, Visible = @visible
	
END
GO
PRINT N'Creating Procedure [dbo].[UpdateSupplier]...';


GO
CREATE PROCEDURE [dbo].[UpdateSupplier]
    @userid INT,
	@company VARCHAR(80),
	@secId INT,
	@serId INT,
	@contact VARCHAR(100),
	@phone VARCHAR(100),
	@email VARCHAR(100),
	@url VARCHAR(50),
	@address VARCHAR(250),
	@city VARCHAR(80),
	@ctry VARCHAR (50),
	@ainfo VARCHAR(350),
	@id INT
AS
BEGIN
	UPDATE Supplier SET Company = @company, SectorId = @secId, ServiceId = @serId, Membership = 0, Contact = @contact, Phone = @phone, Email = @email, [Url] = @url,  [Address] = @address, City = @city,	Country = @ctry, AdditInfo = @ainfo, [Status] = 1, Created = Getdate()
	WHERE Id = @id and UserId = @userid
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd8d78eef-acf5-4e28-936e-85bb30890c67')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d8d78eef-acf5-4e28-936e-85bb30890c67')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '71826f8c-91b6-4ff0-ac21-89f969ab0d67')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('71826f8c-91b6-4ff0-ac21-89f969ab0d67')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '713bafcc-6111-4725-89b5-9f415fcf814a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('713bafcc-6111-4725-89b5-9f415fcf814a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '045d0999-4436-4871-b79a-598e039a2587')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('045d0999-4436-4871-b79a-598e039a2587')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1c4892d6-16d0-434d-91b3-dba0b284e9d2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1c4892d6-16d0-434d-91b3-dba0b284e9d2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b39a6482-3bca-402d-9583-9a89ffac7289')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b39a6482-3bca-402d-9583-9a89ffac7289')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '645c165a-890d-4e31-9a63-d72d34e12d3f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('645c165a-890d-4e31-9a63-d72d34e12d3f')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO AppRole (RoleName) VALUES ('User'), ('Moderator'), ('Admin')

EXEC AppUserRegister 'admin@afriksoko.com', 'Test1234=', 'Eric'
EXEC AppUserRegister 'moderator@afriksoko.com', 'Modo1234=', 'Moderator'
EXEC AppUserRegister 'user@afriksoko.com', 'User1234=', 'User'
EXEC AppUserRegister 'kolotoure@wakandaplc.com', 'koto1234=', 'Ktouré'
EXEC AppUserRegister 'vkompany@mail.com', 'vko1234=', 'Vkompany'
EXEC AppUserRegister 'kdebruyne@mail.com', 'kdb1234=', 'Kdbruyne'


UPDATE AppUser SET RoleId = 3 WHERE Id = 1
UPDATE AppUser SET RoleId = 2 WHERE Id = 2

INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Basic Membership',500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Full Membership',500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Management & Advisory',1500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Management',700.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Management Plus',1000.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Advisory',200.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Advisory Plus',400.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Financing',5500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Financing Plus',6500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Certification',300.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Certification Plus',500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Partneship',500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Partneship Plus',700.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Assistance',500.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Assistance Plus',700.00, 'monthly','Save 25% annually')
INSERT INTO ServiceAsked (ServiceName, Price, [Period], Note) VALUES ('Other Services',400.00, 'monthly','Save 25% annually')
INSERT INTO Sector (SectorName) VALUES ('Agriculture')
INSERT INTO Sector (SectorName) VALUES ('Food Processing')
INSERT INTO Sector (SectorName) VALUES ('Consumer Staples')
INSERT INTO Sector (SectorName) VALUES ('Consumer Discretionary')
INSERT INTO Sector (SectorName) VALUES ('Mining')
INSERT INTO Sector (SectorName) VALUES ('Energy')
INSERT INTO Sector (SectorName) VALUES ('Industrials')
INSERT INTO Sector (SectorName) VALUES ('Commercial & Professional Services')
INSERT INTO Sector (SectorName) VALUES ('Capital Goods')
INSERT INTO Sector (SectorName) VALUES ('Transportation')
INSERT INTO Sector (SectorName) VALUES ('Textiles')
INSERT INTO Sector (SectorName) VALUES ('Basic Materials')
INSERT INTO Sector (SectorName) VALUES ('Utilities')
INSERT INTO Sector (SectorName) VALUES ('Financials')
INSERT INTO Sector (SectorName) VALUES ('Real Estate')
INSERT INTO Sector (SectorName) VALUES ('Technology & Telecommunications')
INSERT INTO Sector (SectorName) VALUES ('HealthCare')
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Consumer Staples','cstaples',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Agriculture','agri',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Food Processing','food',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Mining','mines',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Consumer Discretionary','cdiscr',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Industrials','industrials',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Commercials','commerce',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Transportation','transport',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Capital Goods','cgoods',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Textiles','textile',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Energy','energy',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Materials','materials',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Financials','financials',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('Technology & Telecommunications','ict',0,1)
INSERT INTO Category ([Name], [Url], [Deleted], [Visible]) VALUES ('HealthCare','healthcare',0,1)
EXEC AddProductType 'Default'
EXEC AddProductType 'Agriculture'
EXEC AddProductType 'Fish & Farming'
EXEC AddProductType 'Food Processing'
EXEC AddProductType 'Livestock'
EXEC AddProductType 'Beverages'
EXEC AddProductType 'Tobacco'
EXEC AddProductType 'Household & Personal Products'
EXEC AddProductType 'Construction & Engineering'
EXEC AddProductType 'Construction Materials'
EXEC AddProductType 'Building Products'
EXEC AddProductType 'Trading & Distributing'
EXEC AddProductType 'Commercial Services & Supplies'
EXEC AddProductType 'Hotels & Entertainment Services'
EXEC AddProductType 'Media and Publishing'
EXEC AddProductType 'Retailers & Distributors'
EXEC AddProductType 'Automobiles & Auto Parts'
EXEC AddProductType 'Pharmaceutical and Heathcare Services'
EXEC AddProductType 'Technology & Internet Services'
EXEC AddProductType 'Telecommunication Services & Equipment'
EXEC AddProductType 'Technology Hardware & Equipment'
EXEC AddProductType 'Software & Services'
EXEC AddProductType 'Water Utilities'
EXEC AddProductType 'Natural Gas Utilities'
EXEC AddProductType 'Electric Utilities'
EXEC AddProductType 'Multiline Utilities'
EXEC AddProductType 'Machinery & Equipment Components'
EXEC AddProductType 'Aerospace & Defense'
EXEC AddProductType 'Paper & Forest Products'
EXEC AddProductType 'Chemicals'
EXEC AddProductType 'Fertilizers & Agricultural Chemicals'
EXEC AddProductType 'Renewable Energy'
EXEC AddProductType 'Energy Equipment & Services'
EXEC AddProductType 'Oil and Gas Equipment - Services'
EXEC AddProductType 'Oil, Gas & Consumable Fuels'
EXEC AddProductType 'Coal'
EXEC AddProductType 'Diversified Metals & Mining'
EXEC AddProductType 'Transportation Infrastructure'
EXEC AddProductType 'Air Freight & Logistics'
EXEC AddProductType 'Airlines'
EXEC AddProductType 'Road & Rail'
EXEC AddProductType 'Electrical Equipment'
EXEC AddProductType 'Containers & Packaging'
EXEC AddProductType 'Industrial Conglomerates'
EXEC AddProductType 'Textiles, Apparel & Luxury Goods'
EXEC AddProductType 'Semiconductors & Semiconductor Equipment'
EXEC AddProductType 'Education Services'
EXEC AddProductType 'Diversified Consumer Services'
EXEC AddProductType 'Professional Services'
EXEC AddProductType 'Mining'
EXEC AddProductType 'Metals'
EXEC AddProductType 'Precious Metals & Minerals'
EXEC AddProductType 'Gold'
EXEC AddProductType 'Copper'
EXEC AddProductType 'Steel'
EXEC AddProductType 'Silver'
EXEC AddProductType 'Aluminium'
EXEC AddProductType 'Diversified Financials Services'
EXEC AddProductType 'Banking & Investment Services'
EXEC AddProductType 'Banks and Insurance'
EXEC AddProductType 'Equity Real Estate Investment Trusts (REITs)'
EXEC AddProductType 'Real Estate'
EXEC AddProductType 'East Africa'
EXEC AddProductType 'West Africa'
EXEC AddProductType 'South Africa'
EXEC AddProductType 'North Africa'
EXEC AddProductType 'Central Africa'
EXEC AddProductType 'Europe'
EXEC AddProductType 'European Union (EU)'
EXEC AddProductType 'Eastern Europe'
EXEC AddProductType 'Middle East'
EXEC AddProductType 'GCC'
EXEC AddProductType 'Asia'
EXEC AddProductType 'Asia-Pacific'
EXEC AddProductType 'America'
EXEC AddProductType 'North America'
EXEC AddProductType 'South America'
EXEC AddProductType 'Global'
EXEC AddProductType 'China'
EXEC AddProductType 'USA'
EXEC AddProductType 'Africa'
EXEC AddProductType 'Other'
EXEC AddSupplier 4,'Wakanda PLC',1,2,'Kolo Touré','002544526542212','kolotoure@wakandaplc.com','http://www.test.com','AsorokoStreet Avenue 254 - Building A20','Accra','Ghana','Need a global partner to collaborate on longtime basis in future'
EXEC AddProduct 'Ethiopian Blessed Coffee - (Organic)','https://media1.coffee-webstore.com/img/cms/Blog/2014-2016/caf%C3%A9-am%C3%A9ricain.jpg','Since immemorial times ago, Ethiopia has played a leading role in the history of coffee. The beans for this Ethiopian Blessed Coffee, grown organically, come from the Limu region. The secret of Limu coffee is probably the best kept secret in the world... This sumptuous single-origin coffee unfolds an extremely refined taste: the chocolate notes combined with the fruity sweetness guarantee a masterful balance','Ethiopia',2,2
EXEC AddProductVariant 1,2,9.99,19.99
EXEC AddBuyer 6, '+32(0)455 66 22 33', 'Drongen-Ghent','Belgium','KDB Company','http://www.kdb.test'
EXEC AddComment 5,1,'Too much morning, not enough coffee:) This coffee gave me really a brew-tiful day.:)'
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
